pipeline {
    
    agent any
    environment{
       SONAR_HOME= tool "Sonar"
    }
    stages {
        
        stage('code') {
          steps {
            git url: "https://github.com/snehashis123/node-todo-cicd.git" ,branch: "master"
            echo "Code clone successfully done"
          }  
        }
        stage('SonarQube Analysis') {
           steps {
             withSonarQubeEnv("Sonar"){
                sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=nodetodo -Dsonar.projectKey=nodetodo -X"  
             }
           }
        }
        stage('SonarQube Quality Gates') {
           steps {
             timeout(time: 1, unit: "MINUTES"){
                waitForQualityGate  abortPipeline: false 
             }
           }
        }
        stage('OWASP') {
           steps {
             dependencyCheck additionalArguments: '--scan ./' , odcInstallation: 'OWASP'
             dependencyCheckPublisher pattern: '**/dependency-check-report.xml' 
           } 
        }
        stage('Build & Test') {
          steps {
            sh "docker build -t node-app-batch7:latest ."
            echo "Code Build successfully"  
          }  
        }
        stage('Trivy') {
           steps {
             sh "trivy image node-app-batch7"  
           } 
        }
        stage('Push to Private Docker repo') {
           steps {
             withCredentials([usernamePassword(credentialsId:"DockerHubCreds",usernameVariable:"dockerUser",passwordVariable:"dockerPass")]) {
             sh "echo ${dockerPass} | docker login -u ${dockerUser} --password-stdin"
             sh "docker tag node-app-batch7:latest ${dockerUser}/node-app-batch7:latest"
             sh "docker push ${dockerUser}/node-app-batch7:latest"
             echo "Build pushed successfully"
             }
           } 
        }
        stage('Deploy') {
            steps {
              sh "docker-compose down && docker-compose up -d"
              echo " Image deployed successfully"  
            }
        }        
    }
}
